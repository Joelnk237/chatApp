//login
{#if $currentUser}
    <p> Signed as { $currentUser.username }</p>
{:else}

    {#if showSignUp}
        <Signup />
        <button on:click={() => showSignUp = false}>signUp</button>
    {:else}
        <form on:submit|preventDefault>
            <input placeholder="username" type="text" bind:value={username}/>
            <input placeholder="password" type="password" bind:value={password}/>
        </form>
        <button on:click={login}>Login</button>
        <button on:click={() => showSignUp = true}>Sign Up</button>
        <button on:click={() => dispatch('switchToSignup')}>Sign Up</button>
    {/if}
    
{/if}






//signup
{#if showLogin}
        <Login />
        <button on:click={() => showLogin = false}>signUp</button>
    {:else}
        <form on:submit|preventDefault={signUp}>
            <input placeholder="Name" type="text" bind:value={name}/>
            <input placeholder="E-Mail" type="text" bind:value={email}/>
            <input placeholder="username" type="text" bind:value={username}/>
            <input placeholder="password" type="password" bind:value={password}/>
            <input placeholder="Confirm password" type="password" bind:value={passwordConfirm}/>

            {#if errorMessage}
                <p style="color: red;">{errorMessage}</p>
            {/if}
        </form>
        <button on:click={signUp}>signUp</button>
        <button on:click={() => showLogin = true}>Login</button>
    {/if}
    



//chat.svelte

<script lang="ts">
    import { onMount, onDestroy } from "svelte";
    import { currentUser, pb, } from "./pocketbase";


    let messages = [];

    let newMessage:string;

    let unsubscribe: () => void ;
    
    onMount(async () =>{
        const messageList = await pb.collection('messages').getList(1,50, {
            sort : 'created',
            expand: 'user'
        });
        messages = messageList.items ;
        unsubscribe = await pb.collection('messages').subscribe('*', async ({action, record}) => {
            if(action == 'create'){
                const user = await pb.collection('users').getOne(record.user);
                record.expand = {user};
                messages = [...messages, record];
            }
            if(action == 'delete'){

            }
        });

    }
    );

    onDestroy(() => {
        unsubscribe?.();
    });

    function getAvatarUrl(user) {
        if (user?.avatar) {
            return pb.files.getURL(user, user.avatar);
        }
        return 'https://placehold.co/40x40?text=?'; // fallback image
    }

    //src='https://avatars.dicebear.com/api/identicon/${msg.expand?.user?.username}.png'
    
    async function sendMessage() {
        const data = {
            "text" : newMessage ,
            "user" : $currentUser?.id 
        }
        const createdMessage = await pb.collection('messages').create(data);
    }

    function logout(){
        pb.authStore.clear();
        currentUser.set(null);
    }


</script>
<button on:click={logout}>Logout</button>
<div class="messages">
    {#each messages as msg (msg.id)}
        <div class="msg">
            <img class="profil" 
            src={getAvatarUrl(msg.expand?.user)}
            alt="pp"
            width="40px"
            /> 
            <small>
                @{msg.expand?.user?.username}
            </small>
            <div>
                <p class="inhalt">{msg.text}</p>
            </div>
        </div>
    {/each}
</div>
<form on:submit={sendMessage}>
    <input placeholder="write a message" type="text" bind:value={newMessage}/>
    <button type="submit"> send</button>
</form>




//Chat.svelte opti
<script lang="ts">
    import "bootstrap/dist/css/bootstrap.min.css";
    import { onMount, onDestroy } from "svelte";
    import { currentUser, pb, } from "./pocketbase";
    import "$lib/styles/chat.css";


    let messages = [];
    let newMessage: string;
    let users = [];
    let selectedUser: any = null;

    let unsubscribe: () => void ;
    
    onMount(async () =>{
        // Récupère tous les utilisateurs sauf moi-même
        const userList = await pb.collection('users').getList(1, 50, {
            filter: `id != "${$currentUser.id}"`
        });
        users = userList.items;

    });

    onDestroy(() => {
        unsubscribe?.();
    });

    function getAvatarUrl(user) {
        if (user?.avatar) {
            return pb.files.getURL(user, user.avatar);
        }
        return 'https://placehold.co/40x40?text=?'; // fallback image
    }




    async function loadMessages(user) {
        selectedUser = user;
        // Charger tous les messages entre moi et l'utilisateur sélectionné
        const messageList = await pb.collection('messages').getList(1, 100, {
            filter: `(
                (user_from = "${$currentUser.id}" && user_to = "${user.id}") || 
                (user_from = "${user.id}" && user_to = "${$currentUser.id}")
            )`,
            sort: 'created',
            expand: 'user_from,user_to'
        });
        messages = messageList.items;

        // Se réabonner aux nouveaux messages (à refaire à chaque changement d'utilisateur sélectionné)
        unsubscribe?.();
        unsubscribe = await pb.collection('messages').subscribe('*', async ({ action, record }) => {
            if (action === 'create') {
                // Vérifie si le message est dans cette conversation
                if (
                    (record.user_from === $currentUser.id && record.user_to === selectedUser.id) ||
                    (record.user_from === selectedUser.id && record.user_to === $currentUser.id)
                ) {
                    const expanded = await pb.collection('messages').getOne(record.id, {
                        expand: 'user_from,user_to'
                    });
                    messages = [...messages, expanded];
                }
            }
        });
    }

    

    async function sendMessage() {
        if (!newMessage.trim()) return;

        const data = {
            text: newMessage,
            user_from: $currentUser.id,
            user_to: selectedUser.id
        };
        await pb.collection('messages').create(data);
        newMessage = "";
    }

    function logout(){
        pb.authStore.clear();
        currentUser.set(null);
    }


</script>
<button on:click={logout}>Logout</button>
<div class="users">
    <h3>Users</h3>
    <ul>
        {#each users as user (user.id)}
            <li on:click={() => loadMessages(user)} style="cursor:pointer;">
                {user.username}
            </li>
        {/each}
    </ul>
</div>

{#if selectedUser}
    <div class="messages">
        <h2>Chat with {selectedUser.username}</h2>
        {#each messages as msg (msg.id)}
            <div class="msg">
                <img class="profil" 
                     src={getAvatarUrl(msg.expand?.user_from)}
                     alt="profile" 
                     width="40px" />
                <small>
                    @{msg.expand?.user_from?.username}
                </small>
                <div>
                    <p class="inhalt">{msg.text}</p>
                </div>
            </div>
        {/each}
    </div>

    <form on:submit|preventDefault={sendMessage}>
        <input placeholder="write a message" type="text" bind:value={newMessage} />
        <button type="submit">Send</button>
    </form>
{/if}




<section class="gradient-custom">
    <div class="container py-5">
  
      <div class="row">
  
        <div class="col-md-6 col-lg-5 col-xl-5 mb-4 mb-md-0">
  
          <h5 class="font-weight-bold mb-3 text-center text-white">Member</h5>
  
          <div class="card mask-custom">
            <div class="card-body">
  
              <ul class="list-unstyled mb-0">
                <li class="p-2 border-bottom" style="border-bottom: 1px solid rgba(255,255,255,.3) !important;">
                  <a href="#!" class="d-flex justify-content-between link-light">
                    <div class="d-flex flex-row">
                      <img src="https://mdbcdn.b-cdn.net/img/Photos/Avatars/avatar-8.webp" alt="avatar"
                        class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="60">
                      <div class="pt-1">
                        <p class="fw-bold mb-0">John Doe</p>
                        <p class="small text-white">Hello, Are you there?</p>
                      </div>
                    </div>
                    <div class="pt-1">
                      <p class="small text-white mb-1">Just now</p>
                      <span class="badge bg-danger float-end">1</span>
                    </div>
                  </a>
                </li>
                {#each users as user (user.id)}
                    <li on:click={() => loadMessages(user)} style="cursor:pointer;">
                        <div class="d-flex justify-content-between link-light">
                            <div class="d-flex flex-row">
                                <img src={getAvatarUrl(user)} alt="avatar"
                              class="rounded-circle d-flex align-self-center me-3 shadow-1-strong" width="60">
                                <div class="pt-1">
                                    <p class="fw-bold mb-0">{user.username}</p>
                                </div>
                            </div>
                        </div>
                    </li>
                {/each}
                
              </ul>
  
            </div>
          </div>
  
        </div>
  
        <div class="col-md-6 col-lg-7 col-xl-7">
          <ul class="list-unstyled text-white">
            {#if selectedUser}
                {#each messages as msg (msg.id)}
                    <li class="d-flex justify-content-between mb-4">
                        {#if msg.expand?.user_from == currentUser}

                            <div class="card mask-custom w-100">
                                <div class="card-header d-flex justify-content-between p-3"
                                style="border-bottom: 1px solid rgba(255,255,255,.3);">
                                <p class="fw-bold mb-0">{msg.expand?.user_from?.username}</p>
                                <p class="text-light small mb-0"><i class="far fa-clock"></i> 13 mins ago</p>
                                </div>
                                <div class="card-body">
                                <p class="mb-0">
                                    {msg.text}
                                </p>
                                </div>
                            </div>
                            <img src={getAvatarUrl(msg.expand?.user_from)} alt="avatar"
                                class="rounded-circle d-flex align-self-start ms-3 shadow-1-strong" width="60">

                        {:else}
                            
                            <img src={getAvatarUrl(msg.expand?.user_from)} alt="avatar"
                            class="rounded-circle d-flex align-self-start me-3 shadow-1-strong" width="60">
                            <div class="card mask-custom">
                                <div class="card-header d-flex justify-content-between p-3"
                                style="border-bottom: 1px solid rgba(255,255,255,.3);">
                                <p class="fw-bold mb-0">{msg.expand?.user_from?.username}</p>
                                <p class="text-light small mb-0"><i class="far fa-clock"></i> 12 mins ago</p>
                                </div>
                                <div class="card-body">
                                <p class="mb-0">
                                    {msg.text}
                                </p>
                                </div>
                            </div>
                            
                        {/if}
                    </li>
                {/each}
                <li class="mb-3">
                    <div data-mdb-input-init class="form-outline form-white">
                        <form on:submit|preventDefault={sendMessage}>
                            <textarea class="form-control" id="textAreaExample3" rows="4" bind:value={newMessage}></textarea>
                            <label class="form-label" for="textAreaExample3">Message</label>
                            <button  type="submit" data-mdb-button-init data-mdb-ripple-init class="btn btn-light btn-lg btn-rounded float-end">Send</button>
                        </form>
                      
                    </div>
                </li>
                
            {/if}
          </ul>
  
        </div>
  
      </div>
  
    </div>
  </section>
